{"version":3,"sources":["assets/logo.svg","components/Header/Header.jsx","context/group.jsx","components/Sider/Sider.jsx","pages/Home/TDViewer.jsx","pages/Home/Home.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["LytHeader","Layout","Header","className","src","logo","alt","GroupContext","createContext","mockData","id","name","members","GroupContextProvider","children","useState","groups","setGroups","Provider","value","LytSider","Sider","useContext","preSelected","theme","mode","defaultSelectedKeys","active","map","Item","degreesToRadians","degrees","Math","PI","random","min","max","float","val","floor","Figure","params","scene","this","x","y","z","ry","group","THREE","add","position","headHue","bodyHue","headLightness","headMaterial","color","bodyMaterial","arms","body","geometry","bodyMain","createLegs","head","headMain","createEyes","i","armGroup","arm","m","height","rotation","push","eyes","material","eye","legs","leg","forEach","index","armRotation","createBody","createHead","createArms","TDViewer","viewer","useRef","wrapper","useEffect","clientWidth","clientHeight","sizes","width","camera","renderer","window","addEventListener","innerWidth","innerHeight","aspect","updateProjectionMatrix","lightAmbient","lightDirectional","set","figure","init","gsap","to","repeat","duration","yoyo","ticker","bounce","setSize","setPixelRatio","devicePixelRatio","render","current","appendChild","domElement","ref","size","Content","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2PAAe,MAA0B,iC,eCMzBA,EAAcC,IAAtBC,OAUOA,EARA,WACb,OACE,cAACF,EAAD,CAAWG,UAAU,SAArB,SACE,qBAAKC,IAAKC,EAAMF,UAAU,eAAeG,IAAI,Y,0BCNtCC,EAAeC,0BAEtBC,EAAW,CACf,CAAEC,GAAI,SAAUC,KAAM,UAAWC,QAAS,IAC1C,CAAEF,GAAI,SAAUC,KAAM,UAAWC,QAAS,IAC1C,CAAEF,GAAI,SAAUC,KAAM,UAAWC,QAAS,KAG/BC,EAAuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrC,EAA4BC,mBAASN,GAArC,mBAAOO,EAAP,KAAeC,EAAf,KAMA,OACE,cAACV,EAAaW,SAAd,CAAuBC,MAAO,CAACH,EAAQC,GAAvC,SACGH,KChBQM,G,OAAanB,IAApBoB,OA4BOA,EAlBD,WACZ,MAAiBC,qBAAWf,GAArBS,EAAP,oBAEMO,EAAcP,EAAS,CAAC,SAAD,OAAUA,EAAO,GAAGN,KAAQ,KAEzD,OACE,cAACU,EAAD,CAAUjB,UAAU,QAApB,SACE,eAAC,IAAD,CAAMqB,MAAM,OAAOC,KAAK,SAASC,oBAAqBH,EAAtD,WACIP,GAdN,qBAAKb,UAAU,iBAAf,SACE,cAAC,IAAD,CAAUwB,QAAM,MAcbX,GACCA,EAAOY,KAAI,gBAAGjB,EAAH,EAAGA,KAAMD,EAAT,EAASA,GAAT,OACT,cAAC,IAAKmB,KAAN,UAAgClB,GAAhC,gBAAyBD,a,+CCR/BoB,G,OAAmB,SAAAC,GACvB,OAAOA,GAAWC,KAAKC,GAAK,OAGxBC,EAAS,SAACC,EAAKC,GAAwB,IAAnBC,EAAkB,wDACpCC,EAAMN,KAAKE,UAAYE,EAAMD,GAAOA,EAE1C,OAAIE,EACKC,EAGFN,KAAKO,MAAMD,IAIdE,E,WACJ,WAAYC,EAAQC,GAAQ,oBAC1BC,KAAKF,OAAL,aACEG,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,GAAI,GACDN,GAILE,KAAKK,MAAQ,IAAIC,IACjBP,EAAMQ,IAAIP,KAAKK,OAGfL,KAAKK,MAAMG,SAASP,EAAID,KAAKF,OAAOG,EACpCD,KAAKK,MAAMG,SAASN,EAAIF,KAAKF,OAAOI,EACpCF,KAAKK,MAAMG,SAASL,EAAIH,KAAKF,OAAOK,EAKpCH,KAAKS,QAAUlB,EAAO,EAAG,KACzBS,KAAKU,QAAUnB,EAAO,EAAG,KACzBS,KAAKW,cAAgBpB,EAAO,GAAI,IAChCS,KAAKY,aAAe,IAAIN,IAA0B,CAChDO,MAAM,OAAD,OAASb,KAAKS,QAAd,kBAA+BT,KAAKW,cAApC,QAEPX,KAAKc,aAAe,IAAIR,IAA0B,CAChDO,MAAM,OAAD,OAASb,KAAKU,QAAd,iBAGPV,KAAKe,KAAO,G,8CAGd,WACEf,KAAKgB,KAAO,IAAIV,IAChB,IAAMW,EAAW,IAAIX,IAAkB,EAAG,IAAK,GACzCY,EAAW,IAAIZ,IAAWW,EAAUjB,KAAKc,cAE/Cd,KAAKgB,KAAKT,IAAIW,GACdlB,KAAKK,MAAME,IAAIP,KAAKgB,MAEpBhB,KAAKmB,e,wBAGP,WAEEnB,KAAKoB,KAAO,IAAId,IAGhB,IAAMW,EAAW,IAAIX,IAAkB,IAAK,IAAK,KAC3Ce,EAAW,IAAIf,IAAWW,EAAUjB,KAAKY,cAC/CZ,KAAKoB,KAAKb,IAAIc,GAGdrB,KAAKK,MAAME,IAAIP,KAAKoB,MAGpBpB,KAAKoB,KAAKZ,SAASN,EAAI,KAGvBF,KAAKsB,e,wBAGP,WAGE,IAFA,IAESC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAW,IAAIlB,IACfW,EAAW,IAAIX,IAAkB,IAJ1B,IAIwC,KAC/CmB,EAAM,IAAInB,IAAWW,EAAUjB,KAAKY,cACpCc,EAAIH,EAAI,IAAM,EAAI,GAAK,EAG7BC,EAASjB,IAAIkB,GAGbzB,KAAKgB,KAAKT,IAAIiB,GAGdC,EAAIjB,SAASN,GAAIyB,KAGjBH,EAAShB,SAASP,EAAQ,GAAJyB,EACtBF,EAAShB,SAASN,EAAI,GAGtBsB,EAASI,SAASzB,EAAIhB,EAAiB,GAAKuC,GAG5C1B,KAAKe,KAAKc,KAAKL,M,wBAInB,WAKE,IAJA,IAAMM,EAAO,IAAIxB,IACXW,EAAW,IAAIX,IAAqB,IAAM,GAAI,GAC9CyB,EAAW,IAAIzB,IAA0B,CAAEO,MAAO,UAE/CU,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMS,EAAM,IAAI1B,IAAWW,EAAUc,GAC/BL,EAAIH,EAAI,IAAM,EAAI,GAAK,EAE7BO,EAAKvB,IAAIyB,GACTA,EAAIxB,SAASP,EAAI,IAAOyB,EAG1B1B,KAAKoB,KAAKb,IAAIuB,GAEdA,EAAKtB,SAASN,GAAK,GACnB4B,EAAKtB,SAASL,EAAI,K,wBAGpB,WAIE,IAHA,IAAM8B,EAAO,IAAI3B,IACXW,EAAW,IAAIX,IAAkB,IAAM,GAAK,KAEzCiB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMW,EAAM,IAAI5B,IAAWW,EAAUjB,KAAKY,cACpCc,EAAIH,EAAI,IAAM,EAAI,GAAK,EAE7BU,EAAK1B,IAAI2B,GACTA,EAAI1B,SAASP,EAAQ,IAAJyB,EAGnB1B,KAAKK,MAAME,IAAI0B,GACfA,EAAKzB,SAASN,GAAK,KAEnBF,KAAKgB,KAAKT,IAAI0B,K,oBAGhB,WAAU,IAAD,OACPjC,KAAKK,MAAMuB,SAAS1B,EAAIF,KAAKF,OAAOM,GACpCJ,KAAKK,MAAMG,SAASN,EAAIF,KAAKF,OAAOI,EACpCF,KAAKe,KAAKoB,SAAQ,SAACV,EAAKW,GACtB,IAAMV,EAAIU,EAAQ,IAAM,EAAI,GAAK,EAEjCX,EAAIG,SAASzB,EAAI,EAAKL,OAAOuC,YAAcX,O,kBAI/C,WACE1B,KAAKsC,aACLtC,KAAKuC,aACLvC,KAAKwC,iB,KA4IMC,EAhIE,WACf,MAAiB9D,qBAAWf,GAArBS,EAAP,oBAEMqE,EAASC,iBAAO,MAChBC,EAAUD,iBAAO,MAoHvB,OAlHAE,qBAAU,WAER,IAAQC,EACO,IADMC,EAEL,IAMVhD,EAAQ,IAAIO,IAEZ0C,EAAQ,CACZC,MAAOH,EACPnB,OAAQoB,GAIJG,EAAS,IAAI5C,IACjB,GACA0C,EAAMC,MAAQD,EAAMrB,OACpB,GACA,KAEFuB,EAAO1C,SAASL,EAAI,EACpBJ,EAAMQ,IAAI2C,GAKV,IAAMC,EAAW,IAAI7C,IAQrB8C,OAAOC,iBAAiB,UAAU,WAEhCL,EAAMC,MAAQG,OAAOE,WACrBN,EAAMrB,OAASyB,OAAOG,YAGtBL,EAAOM,OAASR,EAAMC,MAAQD,EAAMrB,OACpCuB,EAAOO,4BAIQ,IAAInD,IAA0B,CAAEO,MAAO,WAAxD,IAGM6C,EAAe,IAAIpD,IAAmB,SAAU,IACtDP,EAAMQ,IAAImD,GAEV,IAAMC,EAAmB,IAAIrD,IAAuB,SAAU,IAC9DP,EAAMQ,IAAIoD,GAGVA,EAAiBnD,SAASoD,IAAI,EAAG,EAAG,GAEpC,IAAMC,EAAS,IAAIhE,EAAO,GAAIE,GAC9B8D,EAAOC,OAEPC,IAAKH,IAAIC,EAAO/D,OAAQ,CACtBI,GAAI,MAGN6D,IAAKC,GAAGH,EAAO/D,OAAQ,CACrBM,GAAIjB,EAAiB,KACrB8E,QAAS,EACTC,SAAU,KAGZH,IAAKC,GAAGH,EAAO/D,OAAQ,CACrBI,EAAG,EACHmC,YAAalD,EAAiB,IAC9B8E,QAAS,EACTE,MAAM,EACND,SAAU,KAGZH,IAAKK,OAAO7D,KAAI,WACdsD,EAAOQ,SAlDPlB,EAASmB,QAAQtB,EAAMC,MAAOD,EAAMrB,QACpCwB,EAASoB,cAAclF,KAAKG,IAAI4D,OAAOoB,iBAAkB,IACzDrB,EAASsB,OAAO1E,EAAOmD,MAoDzBR,EAAOgC,QAAQC,YAAYxB,EAASyB,cAyBnC,IAGD,sBAAKpH,UAAU,WAAWqH,IAAKjC,EAA/B,WACIvE,GAhIJ,qBAAKb,UAAU,iBAAf,SACE,cAAC,IAAD,CAAMsH,KAAK,YAgIVzG,GAAU,qBAAKwG,IAAKnC,QClTnBqC,G,OAAYzH,IAAZyH,SAeOC,EAbF,WACX,OACE,cAAC,EAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAACD,EAAD,CAASvH,UAAU,gBAAnB,SACE,cAAC,EAAD,Y,OCAKyH,MATf,WACE,OACE,eAAC,IAAD,CAAQzH,UAAU,MAAlB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCCS0H,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.59c7f7a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.22556bc0.svg\";","import React from 'react';\nimport { Layout } from 'antd';\n\nimport logo from '../../assets/logo.svg';\nimport './Header.scss';\n\nconst { Header: LytHeader } = Layout;\n\nconst Header = () => {\n  return (\n    <LytHeader className=\"header\">\n      <img src={logo} className=\"header__logo\" alt=\"logo\" />\n    </LytHeader>\n  );\n};\n\nexport default Header;\n","import React, { useState, createContext } from 'react';\nimport { node } from 'prop-types';\n\n// import api from '../services/api';\n\nexport const GroupContext = createContext();\n\nconst mockData = [\n  { id: 'groupA', name: 'Group A', members: [] },\n  { id: 'groupB', name: 'Group B', members: [] },\n  { id: 'groupC', name: 'Group C', members: [] },\n];\n\nexport const GroupContextProvider = ({ children }) => {\n  const [groups, setGroups] = useState(mockData);\n\n  // setTimeout(() => {\n  //   setGroups(mockData);\n  // }, 3000);\n\n  return (\n    <GroupContext.Provider value={[groups, setGroups]}>\n      {children}\n    </GroupContext.Provider>\n  );\n};\n\nGroupContextProvider.propTypes = {\n  children: node.isRequired,\n};\n","import React, { useContext } from 'react';\nimport { Layout, Menu, Skeleton } from 'antd';\n\nimport { GroupContext } from '../../context/group';\nimport './Sider.scss';\n\nconst { Sider: LytSider } = Layout;\n\nconst renderLoading = () => {\n  return (\n    <div className=\"sider__loading\">\n      <Skeleton active />\n    </div>\n  );\n};\n\nconst Sider = () => {\n  const [groups] = useContext(GroupContext);\n\n  const preSelected = groups ? [`group-${groups[0].id}`] : null; // FIXME\n\n  return (\n    <LytSider className=\"sider\">\n      <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={preSelected}>\n        {!groups && renderLoading()}\n        {groups &&\n          groups.map(({ name, id }) => (\n            <Menu.Item key={`group-${id}`}>{name}</Menu.Item>\n          ))}\n      </Menu>\n    </LytSider>\n  );\n};\n\nexport default Sider;\n","/* eslint-disable no-plusplus */\n/* eslint-disable no-unused-vars */\nimport React, { useContext, useEffect, useRef } from 'react';\nimport { Spin } from 'antd';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\n\nimport { GroupContext } from '../../context/group';\nimport './TDViewer.scss';\n\n// Helpers\n// const center = (group, scene) => {\n//   new THREE.Box3()\n//     .setFromObject(group)\n//     .getCenter(group.position)\n//     .multiplyScalar(-1);\n//   scene.add(group);\n// };\n\nconst degreesToRadians = degrees => {\n  return degrees * (Math.PI / 180);\n};\n\nconst random = (min, max, float = false) => {\n  const val = Math.random() * (max - min) + min;\n\n  if (float) {\n    return val;\n  }\n\n  return Math.floor(val);\n};\n\n// Figure\nclass Figure {\n  constructor(params, scene) {\n    this.params = {\n      x: 0,\n      y: 0,\n      z: 0,\n      ry: 0,\n      ...params,\n    };\n\n    // Create group and add to scene\n    this.group = new THREE.Group();\n    scene.add(this.group);\n\n    // Position according to params\n    this.group.position.x = this.params.x;\n    this.group.position.y = this.params.y;\n    this.group.position.z = this.params.z;\n    // this.group.rotation.y = this.params.ry\n    // this.group.scale.set(5, 5, 5)\n\n    // Material\n    this.headHue = random(0, 360);\n    this.bodyHue = random(0, 360);\n    this.headLightness = random(40, 65);\n    this.headMaterial = new THREE.MeshLambertMaterial({\n      color: `hsl(${this.headHue}, 30%, ${this.headLightness}%)`,\n    });\n    this.bodyMaterial = new THREE.MeshLambertMaterial({\n      color: `hsl(${this.bodyHue}, 85%, 50%)`,\n    });\n\n    this.arms = [];\n  }\n\n  createBody() {\n    this.body = new THREE.Group();\n    const geometry = new THREE.BoxGeometry(1, 1.5, 1);\n    const bodyMain = new THREE.Mesh(geometry, this.bodyMaterial);\n\n    this.body.add(bodyMain);\n    this.group.add(this.body);\n\n    this.createLegs();\n  }\n\n  createHead() {\n    // Create a new group for the head\n    this.head = new THREE.Group();\n\n    // Create the main cube of the head and add to the group\n    const geometry = new THREE.BoxGeometry(1.4, 1.4, 1.4);\n    const headMain = new THREE.Mesh(geometry, this.headMaterial);\n    this.head.add(headMain);\n\n    // Add the head group to the figure\n    this.group.add(this.head);\n\n    // Position the head group\n    this.head.position.y = 1.65;\n\n    // Add the eyes\n    this.createEyes();\n  }\n\n  createArms() {\n    const height = 0.85;\n\n    for (let i = 0; i < 2; i++) {\n      const armGroup = new THREE.Group();\n      const geometry = new THREE.BoxGeometry(0.25, height, 0.25);\n      const arm = new THREE.Mesh(geometry, this.headMaterial);\n      const m = i % 2 === 0 ? 1 : -1;\n\n      // Add arm to group\n      armGroup.add(arm);\n\n      // Add group to figure\n      this.body.add(armGroup);\n\n      // Translate the arm by half the height\n      arm.position.y = height * -0.5;\n\n      // Position the arm relative to the figure\n      armGroup.position.x = m * 0.8;\n      armGroup.position.y = 0.6;\n\n      // Rotate the arm\n      armGroup.rotation.z = degreesToRadians(30 * m);\n\n      // Push to the array\n      this.arms.push(armGroup);\n    }\n  }\n\n  createEyes() {\n    const eyes = new THREE.Group();\n    const geometry = new THREE.SphereGeometry(0.15, 12, 8);\n    const material = new THREE.MeshLambertMaterial({ color: 0x44445c });\n\n    for (let i = 0; i < 2; i++) {\n      const eye = new THREE.Mesh(geometry, material);\n      const m = i % 2 === 0 ? 1 : -1;\n\n      eyes.add(eye);\n      eye.position.x = 0.36 * m;\n    }\n\n    this.head.add(eyes);\n\n    eyes.position.y = -0.1;\n    eyes.position.z = 0.7;\n  }\n\n  createLegs() {\n    const legs = new THREE.Group();\n    const geometry = new THREE.BoxGeometry(0.25, 0.4, 0.25);\n\n    for (let i = 0; i < 2; i++) {\n      const leg = new THREE.Mesh(geometry, this.headMaterial);\n      const m = i % 2 === 0 ? 1 : -1;\n\n      legs.add(leg);\n      leg.position.x = m * 0.22;\n    }\n\n    this.group.add(legs);\n    legs.position.y = -1.15;\n\n    this.body.add(legs);\n  }\n\n  bounce() {\n    this.group.rotation.y = this.params.ry;\n    this.group.position.y = this.params.y;\n    this.arms.forEach((arm, index) => {\n      const m = index % 2 === 0 ? 1 : -1;\n      // eslint-disable-next-line no-param-reassign\n      arm.rotation.z = this.params.armRotation * m;\n    });\n  }\n\n  init() {\n    this.createBody();\n    this.createHead();\n    this.createArms();\n  }\n}\n\nconst renderLoading = () => {\n  return (\n    <div className=\"sider__loading\">\n      <Spin size=\"large\" />\n    </div>\n  );\n};\n\nconst TDViewer = () => {\n  const [groups] = useContext(GroupContext);\n\n  const viewer = useRef(null);\n  const wrapper = useRef(null);\n\n  useEffect(() => {\n    // const { clientWidth, clientHeight } = wrapper.current;\n    const { clientWidth, clientHeight } = {\n      clientWidth: 700,\n      clientHeight: 600,\n    };\n    // const renderer = new THREE.WebGLRenderer();\n    // renderer.setSize(clientWidth, clientHeight);\n    // viewer.current.appendChild(renderer.domElement);\n\n    const scene = new THREE.Scene();\n\n    const sizes = {\n      width: clientWidth,\n      height: clientHeight,\n    };\n\n    // Camera\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      sizes.width / sizes.height,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n    scene.add(camera);\n\n    /**\n     * Renderer\n     */\n    const renderer = new THREE.WebGLRenderer();\n\n    const render = () => {\n      renderer.setSize(sizes.width, sizes.height);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n      renderer.render(scene, camera);\n    };\n\n    window.addEventListener('resize', () => {\n      // Update sizes\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight;\n\n      // Update camera\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix();\n    });\n\n    // Material\n    const material = new THREE.MeshLambertMaterial({ color: 0xffffff });\n\n    // Lighting\n    const lightAmbient = new THREE.AmbientLight(0x9eaeff, 0.5);\n    scene.add(lightAmbient);\n\n    const lightDirectional = new THREE.DirectionalLight(0xffffff, 0.8);\n    scene.add(lightDirectional);\n\n    // Move the light source towards us\n    lightDirectional.position.set(5, 5, 5);\n\n    const figure = new Figure({}, scene);\n    figure.init();\n\n    gsap.set(figure.params, {\n      y: -1.5,\n    });\n\n    gsap.to(figure.params, {\n      ry: degreesToRadians(360),\n      repeat: -1,\n      duration: 20,\n    });\n\n    gsap.to(figure.params, {\n      y: 0,\n      armRotation: degreesToRadians(90),\n      repeat: -1,\n      yoyo: true,\n      duration: 0.5,\n    });\n\n    gsap.ticker.add(() => {\n      figure.bounce();\n      render();\n    });\n\n    viewer.current.appendChild(renderer.domElement);\n\n    // console.log(clientWidth, clientHeight);\n    // const scene = new THREE.Scene();\n    // const camera = new THREE.PerspectiveCamera(\n    //   75,\n    //   clientWidth / clientHeight,\n    //   0.1,\n    //   1000\n    // );\n    // const renderer = new THREE.WebGLRenderer();\n    // renderer.setSize(clientWidth, clientHeight);\n    // viewer.current.appendChild(renderer.domElement);\n    // const geometry = new THREE.BoxGeometry(1, 1, 1);\n    // const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    // const cube = new THREE.Mesh(geometry, material);\n    // scene.add(cube);\n    // camera.position.z = 5;\n    // const animate = function () {\n    //   requestAnimationFrame(animate);\n    //   cube.rotation.x += 0.01;\n    //   cube.rotation.y += 0.01;\n    //   renderer.render(scene, camera);\n    // };\n    // animate();\n  }, []);\n\n  return (\n    <div className=\"tdviewer\" ref={wrapper}>\n      {!groups && renderLoading()}\n      {groups && <div ref={viewer} />}\n    </div>\n  );\n};\n\nexport default TDViewer;\n","import React from 'react';\nimport { Layout } from 'antd';\n\nimport Sider from '../../components/Sider';\nimport TDViewer from './TDViewer';\nimport { GroupContextProvider } from '../../context/group';\nimport './Home.scss';\n\nconst { Content } = Layout;\n\nconst Home = () => {\n  return (\n    <GroupContextProvider>\n      <Layout>\n        <Sider />\n        <Content className=\"home__content\">\n          <TDViewer />\n        </Content>\n      </Layout>\n    </GroupContextProvider>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Layout } from 'antd';\n\nimport Header from './components/Header';\nimport Home from './pages/Home';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Layout className=\"app\">\n      <Header />\n      <Home />\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}